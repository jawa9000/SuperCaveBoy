<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize player stats

// set up GUI view size
display_set_gui_size(view_wview[0],view_hview[0]); // set the GUI view to the game view dimensions

// init player variables
hp = 3;
maxhp = 3;
sapphires = 0;
score = 0;
highscore = 0;
time = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start game

var start = keyboard_check_pressed(vk_space);
var select = keyboard_check_pressed(vk_alt);
var ctrl = keyboard_check_pressed(vk_control);

if (gamepad_is_connected(0)) {
    start = gamepad_button_check_pressed(0, gp_start);
    select = gamepad_button_check_pressed(0, gp_select);
    ctrl = gamepad_button_check_pressed(0, gp_shoulderl);
}

if (start == true &amp;&amp; room == rm_menu || start == true &amp;&amp; room == rm_controls || start == true &amp;&amp; room == rm_credits) {
    room_goto(rm_one);
}

// see controls and credits
if (select == true &amp;&amp; room == rm_menu) {
    room_goto(rm_controls);
}
if (ctrl == true &amp;&amp; room == rm_controls) {
    room_goto(rm_credits);
}

 // restart room
if (select == true &amp;&amp; room != rm_menu) {
    room_restart(); // restart room
    // reset player stats
    obj_playerStats.hp = 3;
    obj_playerStats.sapphires = 0;
    obj_playerStats.score = 0;
    obj_playerStats.highscore = 0;    
}


// custom restart if in highscore room using the game pad
if (room == rm_highscore &amp;&amp; gamepad_is_connected(0)) {
    restart = gamepad_button_check_pressed(0, gp_start);
    if (restart == true) {
        room_goto(rm_one); // go back to the first room
        // reset player stats
        obj_playerStats.hp = 3;
        obj_playerStats.sapphires = 0;
        obj_playerStats.score = 0;
        obj_playerStats.highscore = 0;
        obj_playerStats.time = 0;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// play bg music at start of game

// create audio emitter
audio_em = audio_emitter_create();

audio_emitter_gain(audio_em, 0.2); // bg music to 20%
audio_play_sound_on(audio_em, snd_music, true, 10); // play music file, loop, high priority
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw stats

// color values for start screen text
var lighter_color = make_color_rgb(214,159,9);
var darker_color = make_color_rgb(161,89,13);

var title_text = "SUPER CAVE#BOY";
//var str;
if (gamepad_is_connected(0)) { // if game controller is connected
    //str = "Press [Start] to Play";
    start_message = "Press [Start] to Play";
    option_message = "Press [Select] for Controls";
    controls_message = "Move: left stick#Jump: right-shoulder button#Restart level: select";
    option_position = 100;
    controls_position = option_position + (24*6);
    credts_message = "Press [Shoulder Left] to see credits";
} else {
    //str = "Press [Space] to Play";
    start_message = "Press [Space] to Play";
    option_message = "Press [Alt] for Controls";
    controls_message = "#Move: left/right arrow keys#Jump: up arrow key#Enter door: down arrow key#Restart room: R#Quit: ESC";
    option_position = 60;
    controls_position = option_position + 176;
    credts_message = "Press [Ctrl] to see credits";
}

switch(room) {
    case(rm_menu):
        draw_set_halign(fa_center);
        draw_set_font(fnt_title);
        draw_text_colour(room_width / 2 + 4, 16, title_text, c_black, c_black, c_black, c_black, 0.7);
        draw_text_colour(room_width / 2, 12, title_text, lighter_color, lighter_color, darker_color, darker_color, 1);
        draw_set_font(fnt_start);
        draw_text_colour(room_width / 2 + 4, room_height - 68, start_message, c_black, c_black, c_black, c_black, 0.7);
        draw_text_colour(room_width / 2, room_height - 72, start_message, lighter_color, lighter_color, darker_color, darker_color, 1);
        draw_text_colour(room_width / 2 + 4, room_height - 38, option_message, c_black, c_black, c_black, c_black, 0.7);
        draw_text_colour(room_width / 2, room_height - 42, option_message, lighter_color, lighter_color, darker_color, darker_color, 1);
        break;
    case(rm_controls):
        draw_set_halign(fa_center);
        draw_set_font(fnt_title);
        draw_text_colour(room_width / 2 + 4, 16, "Controls", c_black, c_black, c_black, c_black, 0.7);
        draw_text_colour(room_width / 2, 12, "Controls", lighter_color, lighter_color, darker_color, darker_color, 1); // controls title
        draw_set_font(fnt_text);
        draw_text_colour(room_width / 2 + 4, option_position, controls_message, lighter_color, lighter_color, darker_color, darker_color,1); // controls message
        draw_text_colour(room_width / 2 + 4, controls_position, credts_message, lighter_color, lighter_color, darker_color, darker_color,1); // see credits
        break;
    case (rm_credits):
        draw_set_halign(fa_center);
        draw_set_font(fnt_title);
        draw_text_colour(room_width / 2 + 4, 16, "Credits", c_black, c_black, c_black, c_black, 0.7);
        draw_text_colour(room_width / 2, 12, "Credits", lighter_color, lighter_color, darker_color, darker_color, 1); // credits title
        draw_set_font(fnt_text);
        draw_text_colour(room_width / 2 + 4, 100, "Inspiration: Jimmy and Shweta", lighter_color, lighter_color, darker_color, darker_color,1);
        draw_set_font(fnt_small);
        draw_text_colour(room_width / 2 + 4, 148, "#Music#'Volatile Reaction' and 'Lightless Dawn'#by Kevin MacLeod (incompetech.com)#Licensed under Creative Commons:#By Attribution 3.0 License#http://creativecommons.org/licenses/by/3.0/", lighter_color, lighter_color, darker_color, darker_color,1);
        
        break;
    case(rm_highscore):
        draw_set_halign(fa_center);
        //draw_text_colour(view_wview[0] / 2, 80, "SCORE: " + string(score), c_white, c_white, c_white, c_white, 1);
        draw_text_colour(view_wview[0] / 2, 60, "SCORE: " + string(obj_playerStats.sapphires), c_white, c_white, c_white, c_white, 1);
        //draw_text_colour(view_wview[0] / 2, 92, "HIGH SCORE: " + string(obj_playerStats.highscore), c_white, c_white, c_white, c_white, 1);
        draw_text_colour(view_wview[0] / 2, 92, "TIME: " + string(floor(time / room_speed)), c_white, c_white, c_white, c_white, 1);
        draw_text_colour(view_wview[0] / 2, 132, start_message + " again", c_white, c_white, c_white, c_white, 1);
        break;
    default:
        // draw missing hearts (damage taken)
        for (var i = 0; i &lt; maxhp; i++) {
            draw_sprite_ext(spr_heart, 0, 24 + i * 36, 20, 1, 1, 0, c_black, 0.5);
        }
        
        // draw hearts (health)
        for (var i = 0; i &lt; hp; i++) {
            draw_sprite_ext(spr_heart, 0, 24 + i * 36, 20, 1, 1, 0, c_white, 1);
        }
        
        // draw sapphire count
        draw_set_halign(fa_right);
        draw_set_font(fnt_start);
        var str = string(sapphires);
        draw_text_colour(view_wview[0] - 16, 4, str, c_white, c_white, c_white, c_white, 1);
        var text_width = string_width(str);
        draw_sprite(spr_sapphire_gui, 0, view_wview[0] - 32 - text_width, 22);
        
        // iterate time every step
        time += 1;
        
        // draw timer
        draw_text_colour(view_wview[0] / 2, 4, string(floor(time / room_speed)), c_white, c_white, c_white, c_white, 1);
        break;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end game
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
